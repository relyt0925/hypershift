kind: Deployment
apiVersion: apps/v1
metadata:
  name: kube-apiserver
  labels:
    app: kube-apiserver
spec:
{{ if eq .APIAvailabilityPolicy "HighlyAvailable" }}
  replicas: 3
{{ else }}
  replicas: 1
{{ end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 1
  selector:
    matchLabels:
      app: kube-apiserver
  template:
    metadata:
      labels:
        app: kube-apiserver
        clusterID: "{{ .ClusterID }}"
    spec:
      automountServiceAccountToken: false
      serviceAccountName: vpn
      initContainers:
      - image: {{ imageFor "cluster-config-operator" }}
        imagePullPolicy: IfNotPresent
        name: config-bootstrap
        workingDir: /tmp
        command:
        - /bin/bash
        args:
        - -c
        - |-
          cd /tmp
          mkdir input output
          /usr/bin/cluster-config-operator render --config-output-file config --asset-input-dir /tmp/input --asset-output-dir /tmp/output
          cp /tmp/output/manifests/* /work
        volumeMounts:
        - mountPath: /work
          name: bootstrap-manifests
      containers:
      - image: {{ imageFor "cli" }}
        name: initialize-manifests
        env:
        - name: KUBECONFIG
          value: /var/secrets/localhost-kubeconfig/kubeconfig
        workingDir: /work
        command:
        - /bin/bash
        args:
        - -c
        - |-
          while true; do
            if oc apply -f .; then
              echo "Bootstrap manifests applied successfully."
              break
            fi
            sleep 1
          done
          while true; do
            sleep 1000
          done
        volumeMounts:
        - mountPath: /work
          name: bootstrap-manifests
        - mountPath: /var/secrets/localhost-kubeconfig
          name: localhost-kubeconfig
      - name: kube-apiserver
        image: {{ imageFor "hyperkube" }}
        command:
        - hyperkube
        - kube-apiserver
        args:
        - "--openshift-config=/etc/kubernetes/apiserver-config/config.yaml"
        workingDir: /var/log/kube-apiserver
        livenessProbe:
          httpGet:
            scheme: HTTPS
            port: {{ .InternalAPIPort }}
{{ if .ApiserverLivenessPath }}
            path: "{{ .ApiserverLivenessPath }}"
{{ else }}
            path: livez
{{ end }}
          initialDelaySeconds: 45
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            scheme: HTTPS
            port: {{ .InternalAPIPort }}
            path: readyz
          initialDelaySeconds: 10
          timeoutSeconds: 10
        securityContext:
          runAsUser: 1001
          capabilities:
            drop:
            - MKNOD
            - NET_ADMIN
        volumeMounts:
        - mountPath: /etc/kubernetes/secret/
          name: secret
        - mountPath: /etc/kubernetes/apiserver-config/
          name: apiserver-config
        - mountPath: /etc/kubernetes/config/
          name: config
        - mountPath: /etc/kubernetes/oauth/
          name: oauth
        - mountPath: /var/log/kube-apiserver/
          name: logs
        - name: apiserver-cm
          mountPath: /etc/kubernetes/audit/
      volumes:
      - name: bootstrap-manifests
        emptyDir: {}
      - secret:
          secretName: kube-apiserver
        name: secret
      - emptyDir: {}
        name: logs
      - configMap:
          name: kube-apiserver
        name: config
      - secret:
          secretName: localhost-admin-kubeconfig
        name: localhost-kubeconfig
      - configMap:
          name: kube-apiserver-config
        name: apiserver-config
      - configMap:
          name: kube-apiserver-oauth-metadata
        name: oauth
      - name: apiserver-cm
        configMap:
          name: apiserver-default-audit-cm
